/* tslint:disable */
/* eslint-disable */
/**
 * sicsogt
 * sicsogt API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Periode } from '../models';
// @ts-ignore
import { PeriodeCreate } from '../models';
// @ts-ignore
import { PeriodeUpdate } from '../models';
/**
 * PeriodeApi - axios parameter creator
 * @export
 */
export const PeriodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Periode
         * @param {PeriodeCreate} periodeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPeriode: async (periodeCreate: PeriodeCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'periodeCreate' is not null or undefined
            assertParamExists('createPeriode', 'periodeCreate', periodeCreate)
            const localVarPath = `/api/v2/periode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(periodeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Periode
         * @param {number} periodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeriode: async (periodeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'periodeId' is not null or undefined
            assertParamExists('deletePeriode', 'periodeId', periodeId)
            const localVarPath = `/api/v2/periode/{periodeId}`
                .replace(`{${"periodeId"}}`, encodeURIComponent(String(periodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Periode
         * @param {number} periodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriode: async (periodeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'periodeId' is not null or undefined
            assertParamExists('getPeriode', 'periodeId', periodeId)
            const localVarPath = `/api/v2/periode/{periodeId}`
                .replace(`{${"periodeId"}}`, encodeURIComponent(String(periodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Periodes
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriodes: async (sort?: string, range?: string, filter?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/periode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Periode
         * @param {number} periodeId 
         * @param {PeriodeUpdate} periodeUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePeriode: async (periodeId: number, periodeUpdate: PeriodeUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'periodeId' is not null or undefined
            assertParamExists('updatePeriode', 'periodeId', periodeId)
            // verify required parameter 'periodeUpdate' is not null or undefined
            assertParamExists('updatePeriode', 'periodeUpdate', periodeUpdate)
            const localVarPath = `/api/v2/periode/{periodeId}`
                .replace(`{${"periodeId"}}`, encodeURIComponent(String(periodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(periodeUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeriodeApi - functional programming interface
 * @export
 */
export const PeriodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeriodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Periode
         * @param {PeriodeCreate} periodeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPeriode(periodeCreate: PeriodeCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Periode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPeriode(periodeCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Periode
         * @param {number} periodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePeriode(periodeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePeriode(periodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Periode
         * @param {number} periodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeriode(periodeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Periode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeriode(periodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Periodes
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeriodes(sort?: string, range?: string, filter?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Periode>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeriodes(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Periode
         * @param {number} periodeId 
         * @param {PeriodeUpdate} periodeUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePeriode(periodeId: number, periodeUpdate: PeriodeUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Periode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePeriode(periodeId, periodeUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PeriodeApi - factory interface
 * @export
 */
export const PeriodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeriodeApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Periode
         * @param {PeriodeCreate} periodeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPeriode(periodeCreate: PeriodeCreate, options?: any): AxiosPromise<Periode> {
            return localVarFp.createPeriode(periodeCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Periode
         * @param {number} periodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeriode(periodeId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deletePeriode(periodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Periode
         * @param {number} periodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriode(periodeId: number, options?: any): AxiosPromise<Periode> {
            return localVarFp.getPeriode(periodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Periodes
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriodes(sort?: string, range?: string, filter?: any, options?: any): AxiosPromise<Array<Periode>> {
            return localVarFp.getPeriodes(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Periode
         * @param {number} periodeId 
         * @param {PeriodeUpdate} periodeUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePeriode(periodeId: number, periodeUpdate: PeriodeUpdate, options?: any): AxiosPromise<Periode> {
            return localVarFp.updatePeriode(periodeId, periodeUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPeriode operation in PeriodeApi.
 * @export
 * @interface PeriodeApiCreatePeriodeRequest
 */
export interface PeriodeApiCreatePeriodeRequest {
    /**
     * 
     * @type {PeriodeCreate}
     * @memberof PeriodeApiCreatePeriode
     */
    readonly periodeCreate: PeriodeCreate
}

/**
 * Request parameters for deletePeriode operation in PeriodeApi.
 * @export
 * @interface PeriodeApiDeletePeriodeRequest
 */
export interface PeriodeApiDeletePeriodeRequest {
    /**
     * 
     * @type {number}
     * @memberof PeriodeApiDeletePeriode
     */
    readonly periodeId: number
}

/**
 * Request parameters for getPeriode operation in PeriodeApi.
 * @export
 * @interface PeriodeApiGetPeriodeRequest
 */
export interface PeriodeApiGetPeriodeRequest {
    /**
     * 
     * @type {number}
     * @memberof PeriodeApiGetPeriode
     */
    readonly periodeId: number
}

/**
 * Request parameters for getPeriodes operation in PeriodeApi.
 * @export
 * @interface PeriodeApiGetPeriodesRequest
 */
export interface PeriodeApiGetPeriodesRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof PeriodeApiGetPeriodes
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof PeriodeApiGetPeriodes
     */
    readonly range?: string

    /**
     * Format: &#x60;{cle, valeur}&#x60;
     * @type {any}
     * @memberof PeriodeApiGetPeriodes
     */
    readonly filter?: any
}

/**
 * Request parameters for updatePeriode operation in PeriodeApi.
 * @export
 * @interface PeriodeApiUpdatePeriodeRequest
 */
export interface PeriodeApiUpdatePeriodeRequest {
    /**
     * 
     * @type {number}
     * @memberof PeriodeApiUpdatePeriode
     */
    readonly periodeId: number

    /**
     * 
     * @type {PeriodeUpdate}
     * @memberof PeriodeApiUpdatePeriode
     */
    readonly periodeUpdate: PeriodeUpdate
}

/**
 * PeriodeApi - object-oriented interface
 * @export
 * @class PeriodeApi
 * @extends {BaseAPI}
 */
export class PeriodeApi extends BaseAPI {
    /**
     * 
     * @summary Create Periode
     * @param {PeriodeApiCreatePeriodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodeApi
     */
    public createPeriode(requestParameters: PeriodeApiCreatePeriodeRequest, options?: any) {
        return PeriodeApiFp(this.configuration).createPeriode(requestParameters.periodeCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Periode
     * @param {PeriodeApiDeletePeriodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodeApi
     */
    public deletePeriode(requestParameters: PeriodeApiDeletePeriodeRequest, options?: any) {
        return PeriodeApiFp(this.configuration).deletePeriode(requestParameters.periodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Periode
     * @param {PeriodeApiGetPeriodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodeApi
     */
    public getPeriode(requestParameters: PeriodeApiGetPeriodeRequest, options?: any) {
        return PeriodeApiFp(this.configuration).getPeriode(requestParameters.periodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Periodes
     * @param {PeriodeApiGetPeriodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodeApi
     */
    public getPeriodes(requestParameters: PeriodeApiGetPeriodesRequest = {}, options?: any) {
        return PeriodeApiFp(this.configuration).getPeriodes(requestParameters.sort, requestParameters.range, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Periode
     * @param {PeriodeApiUpdatePeriodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodeApi
     */
    public updatePeriode(requestParameters: PeriodeApiUpdatePeriodeRequest, options?: any) {
        return PeriodeApiFp(this.configuration).updatePeriode(requestParameters.periodeId, requestParameters.periodeUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
