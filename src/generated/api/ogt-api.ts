/* tslint:disable */
/* eslint-disable */
/**
 * sicsogt
 * sicsogt API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Ogt } from '../models';
// @ts-ignore
import { OgtCreate } from '../models';
// @ts-ignore
import { OgtUpdate } from '../models';
/**
 * OgtApi - axios parameter creator
 * @export
 */
export const OgtApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Ogt
         * @param {OgtCreate} ogtCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOgt: async (ogtCreate: OgtCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ogtCreate' is not null or undefined
            assertParamExists('createOgt', 'ogtCreate', ogtCreate)
            const localVarPath = `/api/v2/ogt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ogtCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Ogt
         * @param {number} ogtId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOgt: async (ogtId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ogtId' is not null or undefined
            assertParamExists('deleteOgt', 'ogtId', ogtId)
            const localVarPath = `/api/v2/ogt/{ogt_id}`
                .replace(`{${"ogt_id"}}`, encodeURIComponent(String(ogtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Ogt
         * @param {number} ogtId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOgt: async (ogtId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ogtId' is not null or undefined
            assertParamExists('getOgt', 'ogtId', ogtId)
            const localVarPath = `/api/v2/ogt/{ogt_id}`
                .replace(`{${"ogt_id"}}`, encodeURIComponent(String(ogtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Ogts
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOgts: async (sort?: string, range?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/ogt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Ogt
         * @param {number} ogtId 
         * @param {OgtUpdate} ogtUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOgt: async (ogtId: number, ogtUpdate: OgtUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ogtId' is not null or undefined
            assertParamExists('updateOgt', 'ogtId', ogtId)
            // verify required parameter 'ogtUpdate' is not null or undefined
            assertParamExists('updateOgt', 'ogtUpdate', ogtUpdate)
            const localVarPath = `/api/v2/ogt/{ogt_id}`
                .replace(`{${"ogt_id"}}`, encodeURIComponent(String(ogtId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ogtUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OgtApi - functional programming interface
 * @export
 */
export const OgtApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OgtApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Ogt
         * @param {OgtCreate} ogtCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOgt(ogtCreate: OgtCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ogt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOgt(ogtCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Ogt
         * @param {number} ogtId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOgt(ogtId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOgt(ogtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Ogt
         * @param {number} ogtId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOgt(ogtId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ogt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOgt(ogtId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Ogts
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOgts(sort?: string, range?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ogt>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOgts(sort, range, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Ogt
         * @param {number} ogtId 
         * @param {OgtUpdate} ogtUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOgt(ogtId: number, ogtUpdate: OgtUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ogt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOgt(ogtId, ogtUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OgtApi - factory interface
 * @export
 */
export const OgtApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OgtApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Ogt
         * @param {OgtCreate} ogtCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOgt(ogtCreate: OgtCreate, options?: any): AxiosPromise<Ogt> {
            return localVarFp.createOgt(ogtCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Ogt
         * @param {number} ogtId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOgt(ogtId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteOgt(ogtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Ogt
         * @param {number} ogtId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOgt(ogtId: number, options?: any): AxiosPromise<Ogt> {
            return localVarFp.getOgt(ogtId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Ogts
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOgts(sort?: string, range?: string, options?: any): AxiosPromise<Array<Ogt>> {
            return localVarFp.getOgts(sort, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Ogt
         * @param {number} ogtId 
         * @param {OgtUpdate} ogtUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOgt(ogtId: number, ogtUpdate: OgtUpdate, options?: any): AxiosPromise<Ogt> {
            return localVarFp.updateOgt(ogtId, ogtUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOgt operation in OgtApi.
 * @export
 * @interface OgtApiCreateOgtRequest
 */
export interface OgtApiCreateOgtRequest {
    /**
     * 
     * @type {OgtCreate}
     * @memberof OgtApiCreateOgt
     */
    readonly ogtCreate: OgtCreate
}

/**
 * Request parameters for deleteOgt operation in OgtApi.
 * @export
 * @interface OgtApiDeleteOgtRequest
 */
export interface OgtApiDeleteOgtRequest {
    /**
     * 
     * @type {number}
     * @memberof OgtApiDeleteOgt
     */
    readonly ogtId: number
}

/**
 * Request parameters for getOgt operation in OgtApi.
 * @export
 * @interface OgtApiGetOgtRequest
 */
export interface OgtApiGetOgtRequest {
    /**
     * 
     * @type {number}
     * @memberof OgtApiGetOgt
     */
    readonly ogtId: number
}

/**
 * Request parameters for getOgts operation in OgtApi.
 * @export
 * @interface OgtApiGetOgtsRequest
 */
export interface OgtApiGetOgtsRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof OgtApiGetOgts
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof OgtApiGetOgts
     */
    readonly range?: string
}

/**
 * Request parameters for updateOgt operation in OgtApi.
 * @export
 * @interface OgtApiUpdateOgtRequest
 */
export interface OgtApiUpdateOgtRequest {
    /**
     * 
     * @type {number}
     * @memberof OgtApiUpdateOgt
     */
    readonly ogtId: number

    /**
     * 
     * @type {OgtUpdate}
     * @memberof OgtApiUpdateOgt
     */
    readonly ogtUpdate: OgtUpdate
}

/**
 * OgtApi - object-oriented interface
 * @export
 * @class OgtApi
 * @extends {BaseAPI}
 */
export class OgtApi extends BaseAPI {
    /**
     * 
     * @summary Create Ogt
     * @param {OgtApiCreateOgtRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgtApi
     */
    public createOgt(requestParameters: OgtApiCreateOgtRequest, options?: any) {
        return OgtApiFp(this.configuration).createOgt(requestParameters.ogtCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Ogt
     * @param {OgtApiDeleteOgtRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgtApi
     */
    public deleteOgt(requestParameters: OgtApiDeleteOgtRequest, options?: any) {
        return OgtApiFp(this.configuration).deleteOgt(requestParameters.ogtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Ogt
     * @param {OgtApiGetOgtRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgtApi
     */
    public getOgt(requestParameters: OgtApiGetOgtRequest, options?: any) {
        return OgtApiFp(this.configuration).getOgt(requestParameters.ogtId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Ogts
     * @param {OgtApiGetOgtsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgtApi
     */
    public getOgts(requestParameters: OgtApiGetOgtsRequest = {}, options?: any) {
        return OgtApiFp(this.configuration).getOgts(requestParameters.sort, requestParameters.range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Ogt
     * @param {OgtApiUpdateOgtRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgtApi
     */
    public updateOgt(requestParameters: OgtApiUpdateOgtRequest, options?: any) {
        return OgtApiFp(this.configuration).updateOgt(requestParameters.ogtId, requestParameters.ogtUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
