/* tslint:disable */
/* eslint-disable */
/**
 * sicsogt
 * sicsogt API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SuiviValidation } from '../models';
/**
 * SuivivalidationApi - axios parameter creator
 * @export
 */
export const SuivivalidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Suivivalidation
         * @param {number} suivivalidationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSuivivalidation: async (suivivalidationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'suivivalidationId' is not null or undefined
            assertParamExists('deleteSuivivalidation', 'suivivalidationId', suivivalidationId)
            const localVarPath = `/api/v2/suivivalidation/{suivivalidationId}`
                .replace(`{${"suivivalidationId"}}`, encodeURIComponent(String(suivivalidationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Suivivalidation
         * @param {number} suivivalidationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuivivalidation: async (suivivalidationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'suivivalidationId' is not null or undefined
            assertParamExists('getSuivivalidation', 'suivivalidationId', suivivalidationId)
            const localVarPath = `/api/v2/suivivalidation/{suivivalidationId}`
                .replace(`{${"suivivalidationId"}}`, encodeURIComponent(String(suivivalidationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Suivivalidations
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuivivalidations: async (sort?: string, range?: string, filter?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/suivivalidation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuivivalidationApi - functional programming interface
 * @export
 */
export const SuivivalidationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SuivivalidationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Suivivalidation
         * @param {number} suivivalidationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSuivivalidation(suivivalidationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSuivivalidation(suivivalidationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Suivivalidation
         * @param {number} suivivalidationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuivivalidation(suivivalidationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuiviValidation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuivivalidation(suivivalidationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Suivivalidations
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuivivalidations(sort?: string, range?: string, filter?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuiviValidation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuivivalidations(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SuivivalidationApi - factory interface
 * @export
 */
export const SuivivalidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SuivivalidationApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Suivivalidation
         * @param {number} suivivalidationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSuivivalidation(suivivalidationId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteSuivivalidation(suivivalidationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Suivivalidation
         * @param {number} suivivalidationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuivivalidation(suivivalidationId: number, options?: any): AxiosPromise<SuiviValidation> {
            return localVarFp.getSuivivalidation(suivivalidationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Suivivalidations
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuivivalidations(sort?: string, range?: string, filter?: any, options?: any): AxiosPromise<Array<SuiviValidation>> {
            return localVarFp.getSuivivalidations(sort, range, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSuivivalidation operation in SuivivalidationApi.
 * @export
 * @interface SuivivalidationApiDeleteSuivivalidationRequest
 */
export interface SuivivalidationApiDeleteSuivivalidationRequest {
    /**
     * 
     * @type {number}
     * @memberof SuivivalidationApiDeleteSuivivalidation
     */
    readonly suivivalidationId: number
}

/**
 * Request parameters for getSuivivalidation operation in SuivivalidationApi.
 * @export
 * @interface SuivivalidationApiGetSuivivalidationRequest
 */
export interface SuivivalidationApiGetSuivivalidationRequest {
    /**
     * 
     * @type {number}
     * @memberof SuivivalidationApiGetSuivivalidation
     */
    readonly suivivalidationId: number
}

/**
 * Request parameters for getSuivivalidations operation in SuivivalidationApi.
 * @export
 * @interface SuivivalidationApiGetSuivivalidationsRequest
 */
export interface SuivivalidationApiGetSuivivalidationsRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof SuivivalidationApiGetSuivivalidations
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof SuivivalidationApiGetSuivivalidations
     */
    readonly range?: string

    /**
     * Format: &#x60;{cle, valeur}&#x60;
     * @type {any}
     * @memberof SuivivalidationApiGetSuivivalidations
     */
    readonly filter?: any
}

/**
 * SuivivalidationApi - object-oriented interface
 * @export
 * @class SuivivalidationApi
 * @extends {BaseAPI}
 */
export class SuivivalidationApi extends BaseAPI {
    /**
     * 
     * @summary Delete Suivivalidation
     * @param {SuivivalidationApiDeleteSuivivalidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuivivalidationApi
     */
    public deleteSuivivalidation(requestParameters: SuivivalidationApiDeleteSuivivalidationRequest, options?: any) {
        return SuivivalidationApiFp(this.configuration).deleteSuivivalidation(requestParameters.suivivalidationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Suivivalidation
     * @param {SuivivalidationApiGetSuivivalidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuivivalidationApi
     */
    public getSuivivalidation(requestParameters: SuivivalidationApiGetSuivivalidationRequest, options?: any) {
        return SuivivalidationApiFp(this.configuration).getSuivivalidation(requestParameters.suivivalidationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Suivivalidations
     * @param {SuivivalidationApiGetSuivivalidationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuivivalidationApi
     */
    public getSuivivalidations(requestParameters: SuivivalidationApiGetSuivivalidationsRequest = {}, options?: any) {
        return SuivivalidationApiFp(this.configuration).getSuivivalidations(requestParameters.sort, requestParameters.range, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }
}
