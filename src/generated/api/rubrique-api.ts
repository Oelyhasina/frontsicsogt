/* tslint:disable */
/* eslint-disable */
/**
 * sicsogt
 * sicsogt API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Rubrique } from '../models';
// @ts-ignore
import { RubriqueCreate } from '../models';
// @ts-ignore
import { RubriqueUpdate } from '../models';
/**
 * RubriqueApi - axios parameter creator
 * @export
 */
export const RubriqueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Rubrique
         * @param {RubriqueCreate} rubriqueCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRubrique: async (rubriqueCreate: RubriqueCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rubriqueCreate' is not null or undefined
            assertParamExists('createRubrique', 'rubriqueCreate', rubriqueCreate)
            const localVarPath = `/api/v2/rubrique`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rubriqueCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Rubrique
         * @param {number} rubriqueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRubrique: async (rubriqueId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rubriqueId' is not null or undefined
            assertParamExists('deleteRubrique', 'rubriqueId', rubriqueId)
            const localVarPath = `/api/v2/rubrique/{rubriqueId}`
                .replace(`{${"rubriqueId"}}`, encodeURIComponent(String(rubriqueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Rubrique
         * @param {number} rubriqueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRubrique: async (rubriqueId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rubriqueId' is not null or undefined
            assertParamExists('getRubrique', 'rubriqueId', rubriqueId)
            const localVarPath = `/api/v2/rubrique/{rubriqueId}`
                .replace(`{${"rubriqueId"}}`, encodeURIComponent(String(rubriqueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Rubriques
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRubriques: async (sort?: string, range?: string, filter?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/rubrique`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Rubrique
         * @param {number} rubriqueId 
         * @param {RubriqueUpdate} rubriqueUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRubrique: async (rubriqueId: number, rubriqueUpdate: RubriqueUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rubriqueId' is not null or undefined
            assertParamExists('updateRubrique', 'rubriqueId', rubriqueId)
            // verify required parameter 'rubriqueUpdate' is not null or undefined
            assertParamExists('updateRubrique', 'rubriqueUpdate', rubriqueUpdate)
            const localVarPath = `/api/v2/rubrique/{rubriqueId}`
                .replace(`{${"rubriqueId"}}`, encodeURIComponent(String(rubriqueId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rubriqueUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RubriqueApi - functional programming interface
 * @export
 */
export const RubriqueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RubriqueApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Rubrique
         * @param {RubriqueCreate} rubriqueCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRubrique(rubriqueCreate: RubriqueCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rubrique>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRubrique(rubriqueCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Rubrique
         * @param {number} rubriqueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRubrique(rubriqueId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRubrique(rubriqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Rubrique
         * @param {number} rubriqueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRubrique(rubriqueId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rubrique>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRubrique(rubriqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Rubriques
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRubriques(sort?: string, range?: string, filter?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Rubrique>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRubriques(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Rubrique
         * @param {number} rubriqueId 
         * @param {RubriqueUpdate} rubriqueUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRubrique(rubriqueId: number, rubriqueUpdate: RubriqueUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rubrique>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRubrique(rubriqueId, rubriqueUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RubriqueApi - factory interface
 * @export
 */
export const RubriqueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RubriqueApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Rubrique
         * @param {RubriqueCreate} rubriqueCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRubrique(rubriqueCreate: RubriqueCreate, options?: any): AxiosPromise<Rubrique> {
            return localVarFp.createRubrique(rubriqueCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Rubrique
         * @param {number} rubriqueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRubrique(rubriqueId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteRubrique(rubriqueId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Rubrique
         * @param {number} rubriqueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRubrique(rubriqueId: number, options?: any): AxiosPromise<Rubrique> {
            return localVarFp.getRubrique(rubriqueId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Rubriques
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRubriques(sort?: string, range?: string, filter?: any, options?: any): AxiosPromise<Array<Rubrique>> {
            return localVarFp.getRubriques(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Rubrique
         * @param {number} rubriqueId 
         * @param {RubriqueUpdate} rubriqueUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRubrique(rubriqueId: number, rubriqueUpdate: RubriqueUpdate, options?: any): AxiosPromise<Rubrique> {
            return localVarFp.updateRubrique(rubriqueId, rubriqueUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRubrique operation in RubriqueApi.
 * @export
 * @interface RubriqueApiCreateRubriqueRequest
 */
export interface RubriqueApiCreateRubriqueRequest {
    /**
     * 
     * @type {RubriqueCreate}
     * @memberof RubriqueApiCreateRubrique
     */
    readonly rubriqueCreate: RubriqueCreate
}

/**
 * Request parameters for deleteRubrique operation in RubriqueApi.
 * @export
 * @interface RubriqueApiDeleteRubriqueRequest
 */
export interface RubriqueApiDeleteRubriqueRequest {
    /**
     * 
     * @type {number}
     * @memberof RubriqueApiDeleteRubrique
     */
    readonly rubriqueId: number
}

/**
 * Request parameters for getRubrique operation in RubriqueApi.
 * @export
 * @interface RubriqueApiGetRubriqueRequest
 */
export interface RubriqueApiGetRubriqueRequest {
    /**
     * 
     * @type {number}
     * @memberof RubriqueApiGetRubrique
     */
    readonly rubriqueId: number
}

/**
 * Request parameters for getRubriques operation in RubriqueApi.
 * @export
 * @interface RubriqueApiGetRubriquesRequest
 */
export interface RubriqueApiGetRubriquesRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof RubriqueApiGetRubriques
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof RubriqueApiGetRubriques
     */
    readonly range?: string

    /**
     * Format: &#x60;{cle, valeur}&#x60;
     * @type {any}
     * @memberof RubriqueApiGetRubriques
     */
    readonly filter?: any
}

/**
 * Request parameters for updateRubrique operation in RubriqueApi.
 * @export
 * @interface RubriqueApiUpdateRubriqueRequest
 */
export interface RubriqueApiUpdateRubriqueRequest {
    /**
     * 
     * @type {number}
     * @memberof RubriqueApiUpdateRubrique
     */
    readonly rubriqueId: number

    /**
     * 
     * @type {RubriqueUpdate}
     * @memberof RubriqueApiUpdateRubrique
     */
    readonly rubriqueUpdate: RubriqueUpdate
}

/**
 * RubriqueApi - object-oriented interface
 * @export
 * @class RubriqueApi
 * @extends {BaseAPI}
 */
export class RubriqueApi extends BaseAPI {
    /**
     * 
     * @summary Create Rubrique
     * @param {RubriqueApiCreateRubriqueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubriqueApi
     */
    public createRubrique(requestParameters: RubriqueApiCreateRubriqueRequest, options?: any) {
        return RubriqueApiFp(this.configuration).createRubrique(requestParameters.rubriqueCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Rubrique
     * @param {RubriqueApiDeleteRubriqueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubriqueApi
     */
    public deleteRubrique(requestParameters: RubriqueApiDeleteRubriqueRequest, options?: any) {
        return RubriqueApiFp(this.configuration).deleteRubrique(requestParameters.rubriqueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Rubrique
     * @param {RubriqueApiGetRubriqueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubriqueApi
     */
    public getRubrique(requestParameters: RubriqueApiGetRubriqueRequest, options?: any) {
        return RubriqueApiFp(this.configuration).getRubrique(requestParameters.rubriqueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Rubriques
     * @param {RubriqueApiGetRubriquesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubriqueApi
     */
    public getRubriques(requestParameters: RubriqueApiGetRubriquesRequest = {}, options?: any) {
        return RubriqueApiFp(this.configuration).getRubriques(requestParameters.sort, requestParameters.range, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Rubrique
     * @param {RubriqueApiUpdateRubriqueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubriqueApi
     */
    public updateRubrique(requestParameters: RubriqueApiUpdateRubriqueRequest, options?: any) {
        return RubriqueApiFp(this.configuration).updateRubrique(requestParameters.rubriqueId, requestParameters.rubriqueUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
