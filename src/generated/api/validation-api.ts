/* tslint:disable */
/* eslint-disable */
/**
 * sicsogt
 * sicsogt API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Validation } from '../models';
// @ts-ignore
import { ValidationUpdate } from '../models';
/**
 * ValidationApi - axios parameter creator
 * @export
 */
export const ValidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Validation
         * @param {number} validationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteValidation: async (validationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'validationId' is not null or undefined
            assertParamExists('deleteValidation', 'validationId', validationId)
            const localVarPath = `/api/v2/validation/{validationId}`
                .replace(`{${"validationId"}}`, encodeURIComponent(String(validationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Validation
         * @param {number} validationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidation: async (validationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'validationId' is not null or undefined
            assertParamExists('getValidation', 'validationId', validationId)
            const localVarPath = `/api/v2/validation/{validationId}`
                .replace(`{${"validationId"}}`, encodeURIComponent(String(validationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Validations
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidations: async (sort?: string, range?: string, filter?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/validation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Validation
         * @param {number} validationId 
         * @param {ValidationUpdate} validationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateValidation: async (validationId: number, validationUpdate: ValidationUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'validationId' is not null or undefined
            assertParamExists('updateValidation', 'validationId', validationId)
            // verify required parameter 'validationUpdate' is not null or undefined
            assertParamExists('updateValidation', 'validationUpdate', validationUpdate)
            const localVarPath = `/api/v2/validation/{validationId}`
                .replace(`{${"validationId"}}`, encodeURIComponent(String(validationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(validationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValidationApi - functional programming interface
 * @export
 */
export const ValidationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValidationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Validation
         * @param {number} validationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteValidation(validationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteValidation(validationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Validation
         * @param {number} validationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidation(validationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Validation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidation(validationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Validations
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidations(sort?: string, range?: string, filter?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Validation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidations(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Validation
         * @param {number} validationId 
         * @param {ValidationUpdate} validationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateValidation(validationId: number, validationUpdate: ValidationUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Validation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateValidation(validationId, validationUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValidationApi - factory interface
 * @export
 */
export const ValidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValidationApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Validation
         * @param {number} validationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteValidation(validationId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteValidation(validationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Validation
         * @param {number} validationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidation(validationId: number, options?: any): AxiosPromise<Validation> {
            return localVarFp.getValidation(validationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Validations
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidations(sort?: string, range?: string, filter?: any, options?: any): AxiosPromise<Array<Validation>> {
            return localVarFp.getValidations(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Validation
         * @param {number} validationId 
         * @param {ValidationUpdate} validationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateValidation(validationId: number, validationUpdate: ValidationUpdate, options?: any): AxiosPromise<Validation> {
            return localVarFp.updateValidation(validationId, validationUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteValidation operation in ValidationApi.
 * @export
 * @interface ValidationApiDeleteValidationRequest
 */
export interface ValidationApiDeleteValidationRequest {
    /**
     * 
     * @type {number}
     * @memberof ValidationApiDeleteValidation
     */
    readonly validationId: number
}

/**
 * Request parameters for getValidation operation in ValidationApi.
 * @export
 * @interface ValidationApiGetValidationRequest
 */
export interface ValidationApiGetValidationRequest {
    /**
     * 
     * @type {number}
     * @memberof ValidationApiGetValidation
     */
    readonly validationId: number
}

/**
 * Request parameters for getValidations operation in ValidationApi.
 * @export
 * @interface ValidationApiGetValidationsRequest
 */
export interface ValidationApiGetValidationsRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof ValidationApiGetValidations
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof ValidationApiGetValidations
     */
    readonly range?: string

    /**
     * Format: &#x60;{cle, valeur}&#x60;
     * @type {any}
     * @memberof ValidationApiGetValidations
     */
    readonly filter?: any
}

/**
 * Request parameters for updateValidation operation in ValidationApi.
 * @export
 * @interface ValidationApiUpdateValidationRequest
 */
export interface ValidationApiUpdateValidationRequest {
    /**
     * 
     * @type {number}
     * @memberof ValidationApiUpdateValidation
     */
    readonly validationId: number

    /**
     * 
     * @type {ValidationUpdate}
     * @memberof ValidationApiUpdateValidation
     */
    readonly validationUpdate: ValidationUpdate
}

/**
 * ValidationApi - object-oriented interface
 * @export
 * @class ValidationApi
 * @extends {BaseAPI}
 */
export class ValidationApi extends BaseAPI {
    /**
     * 
     * @summary Delete Validation
     * @param {ValidationApiDeleteValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidationApi
     */
    public deleteValidation(requestParameters: ValidationApiDeleteValidationRequest, options?: any) {
        return ValidationApiFp(this.configuration).deleteValidation(requestParameters.validationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Validation
     * @param {ValidationApiGetValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidationApi
     */
    public getValidation(requestParameters: ValidationApiGetValidationRequest, options?: any) {
        return ValidationApiFp(this.configuration).getValidation(requestParameters.validationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Validations
     * @param {ValidationApiGetValidationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidationApi
     */
    public getValidations(requestParameters: ValidationApiGetValidationsRequest = {}, options?: any) {
        return ValidationApiFp(this.configuration).getValidations(requestParameters.sort, requestParameters.range, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Validation
     * @param {ValidationApiUpdateValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidationApi
     */
    public updateValidation(requestParameters: ValidationApiUpdateValidationRequest, options?: any) {
        return ValidationApiFp(this.configuration).updateValidation(requestParameters.validationId, requestParameters.validationUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
