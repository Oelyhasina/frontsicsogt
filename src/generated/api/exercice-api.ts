/* tslint:disable */
/* eslint-disable */
/**
 * sicsogt
 * sicsogt API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Exercice } from '../models';
// @ts-ignore
import { ExerciceCreate } from '../models';
// @ts-ignore
import { ExerciceUpdate } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
/**
 * ExerciceApi - axios parameter creator
 * @export
 */
export const ExerciceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Exercice
         * @param {ExerciceCreate} exerciceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercice: async (exerciceCreate: ExerciceCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciceCreate' is not null or undefined
            assertParamExists('createExercice', 'exerciceCreate', exerciceCreate)
            const localVarPath = `/api/v2/exercice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exerciceCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Exercice
         * @param {number} exerciceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExercice: async (exerciceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciceId' is not null or undefined
            assertParamExists('deleteExercice', 'exerciceId', exerciceId)
            const localVarPath = `/api/v2/exercice/{exerciceId}`
                .replace(`{${"exerciceId"}}`, encodeURIComponent(String(exerciceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Exercice
         * @param {number} exerciceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercice: async (exerciceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciceId' is not null or undefined
            assertParamExists('getExercice', 'exerciceId', exerciceId)
            const localVarPath = `/api/v2/exercice/{exerciceId}`
                .replace(`{${"exerciceId"}}`, encodeURIComponent(String(exerciceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Exercices
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercices: async (sort?: string, range?: string, filter?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/exercice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Exercice
         * @param {number} exerciceId 
         * @param {ExerciceUpdate} exerciceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercice: async (exerciceId: number, exerciceUpdate: ExerciceUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciceId' is not null or undefined
            assertParamExists('updateExercice', 'exerciceId', exerciceId)
            // verify required parameter 'exerciceUpdate' is not null or undefined
            assertParamExists('updateExercice', 'exerciceUpdate', exerciceUpdate)
            const localVarPath = `/api/v2/exercice/{exerciceId}`
                .replace(`{${"exerciceId"}}`, encodeURIComponent(String(exerciceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exerciceUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExerciceApi - functional programming interface
 * @export
 */
export const ExerciceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExerciceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Exercice
         * @param {ExerciceCreate} exerciceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExercice(exerciceCreate: ExerciceCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exercice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExercice(exerciceCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Exercice
         * @param {number} exerciceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExercice(exerciceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExercice(exerciceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Exercice
         * @param {number} exerciceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercice(exerciceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exercice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercice(exerciceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Exercices
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExercices(sort?: string, range?: string, filter?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exercice>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExercices(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Exercice
         * @param {number} exerciceId 
         * @param {ExerciceUpdate} exerciceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExercice(exerciceId: number, exerciceUpdate: ExerciceUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Exercice>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExercice(exerciceId, exerciceUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExerciceApi - factory interface
 * @export
 */
export const ExerciceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExerciceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Exercice
         * @param {ExerciceCreate} exerciceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExercice(exerciceCreate: ExerciceCreate, options?: any): AxiosPromise<Exercice> {
            return localVarFp.createExercice(exerciceCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Exercice
         * @param {number} exerciceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExercice(exerciceId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteExercice(exerciceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Exercice
         * @param {number} exerciceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercice(exerciceId: number, options?: any): AxiosPromise<Exercice> {
            return localVarFp.getExercice(exerciceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Exercices
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExercices(sort?: string, range?: string, filter?: any, options?: any): AxiosPromise<Array<Exercice>> {
            return localVarFp.getExercices(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Exercice
         * @param {number} exerciceId 
         * @param {ExerciceUpdate} exerciceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExercice(exerciceId: number, exerciceUpdate: ExerciceUpdate, options?: any): AxiosPromise<Exercice> {
            return localVarFp.updateExercice(exerciceId, exerciceUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createExercice operation in ExerciceApi.
 * @export
 * @interface ExerciceApiCreateExerciceRequest
 */
export interface ExerciceApiCreateExerciceRequest {
    /**
     * 
     * @type {ExerciceCreate}
     * @memberof ExerciceApiCreateExercice
     */
    readonly exerciceCreate: ExerciceCreate
}

/**
 * Request parameters for deleteExercice operation in ExerciceApi.
 * @export
 * @interface ExerciceApiDeleteExerciceRequest
 */
export interface ExerciceApiDeleteExerciceRequest {
    /**
     * 
     * @type {number}
     * @memberof ExerciceApiDeleteExercice
     */
    readonly exerciceId: number
}

/**
 * Request parameters for getExercice operation in ExerciceApi.
 * @export
 * @interface ExerciceApiGetExerciceRequest
 */
export interface ExerciceApiGetExerciceRequest {
    /**
     * 
     * @type {number}
     * @memberof ExerciceApiGetExercice
     */
    readonly exerciceId: number
}

/**
 * Request parameters for getExercices operation in ExerciceApi.
 * @export
 * @interface ExerciceApiGetExercicesRequest
 */
export interface ExerciceApiGetExercicesRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof ExerciceApiGetExercices
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof ExerciceApiGetExercices
     */
    readonly range?: string

    /**
     * Format: &#x60;{cle, valeur}&#x60;
     * @type {any}
     * @memberof ExerciceApiGetExercices
     */
    readonly filter?: any
}

/**
 * Request parameters for updateExercice operation in ExerciceApi.
 * @export
 * @interface ExerciceApiUpdateExerciceRequest
 */
export interface ExerciceApiUpdateExerciceRequest {
    /**
     * 
     * @type {number}
     * @memberof ExerciceApiUpdateExercice
     */
    readonly exerciceId: number

    /**
     * 
     * @type {ExerciceUpdate}
     * @memberof ExerciceApiUpdateExercice
     */
    readonly exerciceUpdate: ExerciceUpdate
}

/**
 * ExerciceApi - object-oriented interface
 * @export
 * @class ExerciceApi
 * @extends {BaseAPI}
 */
export class ExerciceApi extends BaseAPI {
    /**
     * 
     * @summary Create Exercice
     * @param {ExerciceApiCreateExerciceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciceApi
     */
    public createExercice(requestParameters: ExerciceApiCreateExerciceRequest, options?: any) {
        return ExerciceApiFp(this.configuration).createExercice(requestParameters.exerciceCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Exercice
     * @param {ExerciceApiDeleteExerciceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciceApi
     */
    public deleteExercice(requestParameters: ExerciceApiDeleteExerciceRequest, options?: any) {
        return ExerciceApiFp(this.configuration).deleteExercice(requestParameters.exerciceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Exercice
     * @param {ExerciceApiGetExerciceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciceApi
     */
    public getExercice(requestParameters: ExerciceApiGetExerciceRequest, options?: any) {
        return ExerciceApiFp(this.configuration).getExercice(requestParameters.exerciceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Exercices
     * @param {ExerciceApiGetExercicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciceApi
     */
    public getExercices(requestParameters: ExerciceApiGetExercicesRequest = {}, options?: any) {
        return ExerciceApiFp(this.configuration).getExercices(requestParameters.sort, requestParameters.range, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Exercice
     * @param {ExerciceApiUpdateExerciceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExerciceApi
     */
    public updateExercice(requestParameters: ExerciceApiUpdateExerciceRequest, options?: any) {
        return ExerciceApiFp(this.configuration).updateExercice(requestParameters.exerciceId, requestParameters.exerciceUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
