/* tslint:disable */
/* eslint-disable */
/**
 * sicsogt
 * sicsogt API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Categorie } from '../models';
// @ts-ignore
import { CategorieCreate } from '../models';
// @ts-ignore
import { CategorieUpdate } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
/**
 * CategorieApi - axios parameter creator
 * @export
 */
export const CategorieApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Categorie
         * @param {CategorieCreate} categorieCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategorie: async (categorieCreate: CategorieCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categorieCreate' is not null or undefined
            assertParamExists('createCategorie', 'categorieCreate', categorieCreate)
            const localVarPath = `/api/v2/categorie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categorieCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Categorie
         * @param {number} categorieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategorie: async (categorieId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categorieId' is not null or undefined
            assertParamExists('deleteCategorie', 'categorieId', categorieId)
            const localVarPath = `/api/v2/categorie/{categorieId}`
                .replace(`{${"categorieId"}}`, encodeURIComponent(String(categorieId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Categorie
         * @param {number} categorieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategorie: async (categorieId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categorieId' is not null or undefined
            assertParamExists('getCategorie', 'categorieId', categorieId)
            const localVarPath = `/api/v2/categorie/{categorieId}`
                .replace(`{${"categorieId"}}`, encodeURIComponent(String(categorieId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Categories
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (sort?: string, range?: string, filter?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/categorie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Categorie
         * @param {number} categorieId 
         * @param {CategorieUpdate} categorieUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategorie: async (categorieId: number, categorieUpdate: CategorieUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categorieId' is not null or undefined
            assertParamExists('updateCategorie', 'categorieId', categorieId)
            // verify required parameter 'categorieUpdate' is not null or undefined
            assertParamExists('updateCategorie', 'categorieUpdate', categorieUpdate)
            const localVarPath = `/api/v2/categorie/{categorieId}`
                .replace(`{${"categorieId"}}`, encodeURIComponent(String(categorieId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categorieUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategorieApi - functional programming interface
 * @export
 */
export const CategorieApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategorieApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Categorie
         * @param {CategorieCreate} categorieCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategorie(categorieCreate: CategorieCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Categorie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategorie(categorieCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Categorie
         * @param {number} categorieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategorie(categorieId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategorie(categorieId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Categorie
         * @param {number} categorieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategorie(categorieId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Categorie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategorie(categorieId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Categories
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(sort?: string, range?: string, filter?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Categorie>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(sort, range, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Categorie
         * @param {number} categorieId 
         * @param {CategorieUpdate} categorieUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategorie(categorieId: number, categorieUpdate: CategorieUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Categorie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategorie(categorieId, categorieUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategorieApi - factory interface
 * @export
 */
export const CategorieApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategorieApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Categorie
         * @param {CategorieCreate} categorieCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategorie(categorieCreate: CategorieCreate, options?: any): AxiosPromise<Categorie> {
            return localVarFp.createCategorie(categorieCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Categorie
         * @param {number} categorieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategorie(categorieId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteCategorie(categorieId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Categorie
         * @param {number} categorieId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategorie(categorieId: number, options?: any): AxiosPromise<Categorie> {
            return localVarFp.getCategorie(categorieId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Categories
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {any} [filter] Format: &#x60;{cle, valeur}&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(sort?: string, range?: string, filter?: any, options?: any): AxiosPromise<Array<Categorie>> {
            return localVarFp.getCategories(sort, range, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Categorie
         * @param {number} categorieId 
         * @param {CategorieUpdate} categorieUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategorie(categorieId: number, categorieUpdate: CategorieUpdate, options?: any): AxiosPromise<Categorie> {
            return localVarFp.updateCategorie(categorieId, categorieUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCategorie operation in CategorieApi.
 * @export
 * @interface CategorieApiCreateCategorieRequest
 */
export interface CategorieApiCreateCategorieRequest {
    /**
     * 
     * @type {CategorieCreate}
     * @memberof CategorieApiCreateCategorie
     */
    readonly categorieCreate: CategorieCreate
}

/**
 * Request parameters for deleteCategorie operation in CategorieApi.
 * @export
 * @interface CategorieApiDeleteCategorieRequest
 */
export interface CategorieApiDeleteCategorieRequest {
    /**
     * 
     * @type {number}
     * @memberof CategorieApiDeleteCategorie
     */
    readonly categorieId: number
}

/**
 * Request parameters for getCategorie operation in CategorieApi.
 * @export
 * @interface CategorieApiGetCategorieRequest
 */
export interface CategorieApiGetCategorieRequest {
    /**
     * 
     * @type {number}
     * @memberof CategorieApiGetCategorie
     */
    readonly categorieId: number
}

/**
 * Request parameters for getCategories operation in CategorieApi.
 * @export
 * @interface CategorieApiGetCategoriesRequest
 */
export interface CategorieApiGetCategoriesRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof CategorieApiGetCategories
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof CategorieApiGetCategories
     */
    readonly range?: string

    /**
     * Format: &#x60;{cle, valeur}&#x60;
     * @type {any}
     * @memberof CategorieApiGetCategories
     */
    readonly filter?: any
}

/**
 * Request parameters for updateCategorie operation in CategorieApi.
 * @export
 * @interface CategorieApiUpdateCategorieRequest
 */
export interface CategorieApiUpdateCategorieRequest {
    /**
     * 
     * @type {number}
     * @memberof CategorieApiUpdateCategorie
     */
    readonly categorieId: number

    /**
     * 
     * @type {CategorieUpdate}
     * @memberof CategorieApiUpdateCategorie
     */
    readonly categorieUpdate: CategorieUpdate
}

/**
 * CategorieApi - object-oriented interface
 * @export
 * @class CategorieApi
 * @extends {BaseAPI}
 */
export class CategorieApi extends BaseAPI {
    /**
     * 
     * @summary Create Categorie
     * @param {CategorieApiCreateCategorieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorieApi
     */
    public createCategorie(requestParameters: CategorieApiCreateCategorieRequest, options?: any) {
        return CategorieApiFp(this.configuration).createCategorie(requestParameters.categorieCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Categorie
     * @param {CategorieApiDeleteCategorieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorieApi
     */
    public deleteCategorie(requestParameters: CategorieApiDeleteCategorieRequest, options?: any) {
        return CategorieApiFp(this.configuration).deleteCategorie(requestParameters.categorieId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Categorie
     * @param {CategorieApiGetCategorieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorieApi
     */
    public getCategorie(requestParameters: CategorieApiGetCategorieRequest, options?: any) {
        return CategorieApiFp(this.configuration).getCategorie(requestParameters.categorieId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Categories
     * @param {CategorieApiGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorieApi
     */
    public getCategories(requestParameters: CategorieApiGetCategoriesRequest = {}, options?: any) {
        return CategorieApiFp(this.configuration).getCategories(requestParameters.sort, requestParameters.range, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Categorie
     * @param {CategorieApiUpdateCategorieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategorieApi
     */
    public updateCategorie(requestParameters: CategorieApiUpdateCategorieRequest, options?: any) {
        return CategorieApiFp(this.configuration).updateCategorie(requestParameters.categorieId, requestParameters.categorieUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
